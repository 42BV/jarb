<?xml version="1.0" encoding="UTF-8"?>
<beans
		xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:jee="http://www.springframework.org/schema/jee"
        xsi:schemaLocation="
	        http://www.springframework.org/schema/beans	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd">

    <!-- Scans the classpath of this application for @Components to deploy as beans -->
    <context:component-scan base-package="org.jarb.sample"/>

	<!-- Create a connection to our in-memory database and upgrade it to the latest version -->
	<bean id="dataSource" class="org.jarb.migrations.MigratingDataSource">
	    <property name="delegate">
			<bean class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			    <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
			    <property name="url" value="jdbc:hsqldb:mem:jarb"/>
			    <property name="username" value="sa"/>
			    <property name="password" value=""/>
			</bean>
		</property>
	    <property name="migrator">
	    	<bean class="org.jarb.migrations.LiquibaseMigrator"/>
	    </property>
	</bean>
	
	<!-- Insert content into our database -->
	<bean class="org.jarb.populator.DatabasePopulatorExecutor">
    	<constructor-arg>
			<list>
				<!-- Using SQL statements -->
				<bean class="org.jarb.populator.SqlResourceDatabasePopulator">
					<property name="sqlResource" value="classpath:import.sql"/>
					<property name="dataSource" ref="dataSource"/>
				</bean>
				<!-- And an Excel workbook -->
				<bean class="org.jarb.populator.excel.ExcelDatabasePopulator">
					<property name="excelResource" value="classpath:import.xls"/>
					<property name="entityManagerFactory" ref="entityManagerFactory"/>
				</bean>
			</list>
    	</constructor-arg>
    </bean>

    <!-- Object relational mapping using Hibernate and Spring -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="jpaPropertyMap">
            <map>
            	<!-- Ensure the spring aware validation factory is used -->
				<entry key="javax.persistence.validation.factory" value-ref="validator" />               
				<entry key="hibernate.dialect" value="org.hibernate.dialect.HSQLDialect"/>
				<!-- Schema creation is done by migration, but we still validate the result -->
                <entry key="hibernate.hbm2ddl.auto" value="validate"/>
            </map>
        </property>
        <property name="dataSource" ref="dataSource"/>
    </bean>

	<!-- Transaction support -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- Internationalization (i18n) - Overwrites the default name of Spring. -->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="messages"/>
    </bean>

    <!-- Validations (also uses the messageSource defined above) -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>
    
	<!-- Provides column metadata, required for validation and bean description -->
	<bean id="columnMetadataRepository" class="org.jarb.constraint.database.column.EntityAwareColumnMetadataRepository">
        <constructor-arg ref="dataSource" />
    </bean>
    
    <!-- Provides a bean constraint metadata, required for front-end -->
    <bean id="constraintMetadataGenerator" class="org.jarb.constraint.BeanConstraintMetadataGeneratorFactoryBean">
    	<property name="columnMetadataRepository" ref="columnMetadataRepository"/>
    </bean>
    
    <!-- Translate JDBC driver exceptions into Java exceptions -->
	<bean class="org.jarb.violation.integration.ConstraintViolationExceptionTranslatingBeanPostProcessor">
        <property name="translator">
            <bean class="org.jarb.violation.integration.JpaConstraintViolationExceptionTranslatorFactoryBean">
                <property name="entityManagerFactory" ref="entityManagerFactory"/>
                <!-- Custom exception classes, these are optional -->
                <property name="exceptionClasses">
                    <map>
                        <entry key="uk_posts_title" value="org.jarb.sample.domain.PostTitleAlreadyExistsException"/>
                    </map>
                </property>
            </bean>
        </property>
    </bean>
    
    <import resource="mvc-context.xml"/>

</beans>
